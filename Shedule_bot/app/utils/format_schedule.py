# app/utils/format_schedule.py
from __future__ import annotations

from typing import List, Dict, Tuple
import re
try:
    # –µ—Å–ª–∏ –µ—Å—Ç—å ¬´—É–º–Ω—ã–π¬ª –ø–∞—Ä—Å–µ—Ä
    from app.utils.teacher_parser import extract_teachers_smart as _extract_teachers
except Exception:
    # fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π
    from app.utils.teacher_parser import extract_teachers as _extract_teachers


DAY_ORDER = ["–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö", "–í–¢–û–†–ù–ò–ö", "–°–†–ï–î–ê", "–ß–ï–¢–í–ï–†–ì", "–ü–Ø–¢–ù–ò–¶–ê", "–°–£–ë–ë–û–¢–ê", "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"]

LONG_SEP = "-" * 50
WEEK_SEP = "-" * 50

_TIME_RE = re.compile(r"\s*(\d{1,2}):(\d{2})\s*[-‚Äì‚Äî]\s*(\d{1,2}):(\d{2})\s*")

# ===== helpers =====
def _html_escape(s: str) -> str:
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def _html_escape_attr(s: str) -> str:
    """–≠—Å–∫–µ–π–ø –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö HTML (href)."""
    return (s or "").replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace('"', "&quot;")

def _safe_anchor(url: str, label: str = "Zoom") -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Å—ã–ª–∫—É <a href="...">label</a> —Ç–æ–ª—å–∫–æ –¥–ª—è http/https."""
    u = (url or "").strip()
    if not (u.startswith("http://") or u.startswith("https://")):
        return _html_escape(label)
    return f'<a href="{_html_escape_attr(u)}">{_html_escape(label)}</a>'

def _line_with_room_html(time_s: str, subject_s: str, room_html: str) -> str:
    """
    –°—Ç—Ä–æ–∫–∞ ¬´–≤—Ä–µ–º—è ‚Äî –ø—Ä–µ–¥–º–µ—Ç ‚Äî –∞—É–¥–∏—Ç–æ—Ä–∏—è¬ª, –≥–¥–µ –∞—É–¥–∏—Ç–æ—Ä–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML (—Å—Å—ã–ª–∫—É).
    –í—Ä–µ–º—è –∏ –ø—Ä–µ–¥–º–µ—Ç —ç—Å–∫–µ–π–ø—è—Ç—Å—è, –∞—É–¥–∏—Ç–æ—Ä–∏—è ‚Äî —É–∂–µ –≥–æ—Ç–æ–≤—ã–π HTML.
    """
    time_txt = (time_s or "").strip()
    subj_txt = _ellipsize(_abbrev_subject(_one_line(subject_s or "")), SUBJECT_MAX)
    parts = [_html_escape(time_txt), _html_escape(subj_txt)]
    if room_html:
        parts.append(room_html)
    return " ‚Äî ".join(parts)

def _parse_time_key(time_range: str) -> Tuple[int, int]:
    m = _TIME_RE.match(str(time_range))
    if not m:
        return (9999, 9999)
    h1, m1, h2, m2 = (int(m.group(1)), int(m.group(2)), int(m.group(3)), int(m.group(4)))
    return (h1 * 60 + m1, h2 * 60 + m2)

def _ellipsize(s: str, max_len: int) -> str:
    s = (s or "").strip()
    if len(s) <= max_len:
        return s
    if max_len <= 1:
        return s[:max_len]
    return s[: max_len - 1] + "‚Ä¶"

def _split_lecture_room(text: str) -> tuple[str, str]:
    parts = text.split(" ‚Äî ", 1)
    if len(parts) == 2:
        return parts[0].strip(), parts[1].strip()
    return text.strip(), ""

def _one_line(s: str) -> str:
    """–£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–µ–¥–µ–ª–µ."""
    s = (s or "").replace("\r\n", " ").replace("\n", " ").replace("\r", " ")
    s = re.sub(r"\s{2,}", " ", s).strip()
    return s

def _norm(s: str) -> str:
    return re.sub(r"\s+", " ", (s or "").lower().replace("—ë", "–µ")).strip()

def _is_history_subject(subj: str) -> bool:
    return "–∏—Å—Ç–æ—Ä" in _norm(subj)

def _dedupe_teachers_prefer_rich(teachers: list[str]) -> list[str]:
    """
    –°–∫–ª–µ–∏–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:
    - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ (—Ñ–∞–º–∏–ª–∏—è, –ø–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∞) ‚Äî —á—Ç–æ–±—ã '–ò–≤–∞–Ω–æ–≤ –ê.–ê.' –∏ '–ò–≤–∞–Ω–æ–≤ –ë.–ë.' –Ω–µ —Å—Ö–ª–æ–ø–Ω—É–ª–∏—Å—å,
    - –µ—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –±–µ—Ä—ë–º —Ç–æ—Ç, –≥–¥–µ –ë–û–õ–¨–®–ï –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ (3 > 2 > 1 > 0),
      –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ ‚Äî –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É.
    """
    if not teachers:
        return []

    RUS_U = "–ê-–Ø–Å"; RUS_L = "–∞-—è—ë"
    SURNAME = rf"[{RUS_U}][{RUS_L}]+(?:-[{RUS_U}][{RUS_L}]+)?"
    # ¬´–§–∞–º–∏–ª–∏—è¬ª, ¬´–§–∞–º–∏–ª–∏—è –ò¬ª, ¬´–§–∞–º–∏–ª–∏—è –ò.–û.¬ª, ¬´–§–∞–º–∏–ª–∏—è –ò.–û.–ë.¬ª
    pat = re.compile(rf"^\s*({SURNAME})\s*(?:([{RUS_U}])(?:\.|\s*)?([{RUS_U}])?(?:\.|\s*)?([{RUS_U}])?(?:\.|\s*)?)?\s*$")

    def parse(token: str):
        m = pat.match(token or "")
        if not m:
            # –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª
            return (token.strip().lower(), ""), 0, token.strip()
        surname = m.group(1)
        inits = [x for x in (m.group(2), m.group(3), m.group(4)) if x]
        key = (surname.lower(), (inits[0] if inits else ""))
        richness = len(inits)              # —á–µ–º –±–æ–ª—å—à–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ ‚Äî —Ç–µ–º ¬´–ª—É—á—à–µ¬ª
        # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ (–§–∞–º–∏–ª–∏—è –ò.–û.)
        if not inits:
            display = surname
        else:
            display = surname + " " + ".".join(ch.upper() for ch in inits) + "."
        return key, richness, display

    order: list[tuple[str, str]] = []      # –ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–≤—ã—Ö –ø–æ—è–≤–ª–µ–Ω–∏–π –∫–ª—é—á–µ–π
    best: dict[tuple[str, str], tuple[int, str]] = {}  # key -> (richness, display)
    for t in teachers:
        key, rich, disp = parse(t)
        if key not in best:
            order.append(key)
            best[key] = (rich, disp)
        else:
            cur_rich, cur_disp = best[key]
            if (rich > cur_rich) or (rich == cur_rich and len(disp) > len(cur_disp)):
                best[key] = (rich, disp)

    return [best[k][1] for k in order]

def _strip_teachers(text: str) -> str:
    """
    –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –æ—Ç –§–ò–û, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.
    –£–¥–∞–ª—è–µ–º:
      ‚Ä¢ ¬´–§–∞–º–∏–ª–∏—è –ò.–û.¬ª / ¬´–ò.–û. –§–∞–º–∏–ª–∏—è¬ª (smart/base –ø–∞—Ä—Å–µ—Ä),
      ‚Ä¢ ¬´–§–∞–º–∏–ª–∏—è –ò.¬ª (–æ–¥–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∞),
      ‚Ä¢ ¬´–ª–µ–∫./–ø—Ä–∞–∫—Ç./–ª–∞–±./—Å–µ–º. –§–∞–º–∏–ª–∏—è¬ª –≤ —Ö–≤–æ—Å—Ç–µ.
    """
    s = text or ""

    # 1) —É–±–∏—Ä–∞–µ–º —Ç–æ, —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–∞—à –ø–∞—Ä—Å–µ—Ä (_extract_teachers)
    for t in _extract_teachers(s):
        patt = re.escape(t).replace(r"\.", r"\.?")
        s = re.sub(rf"(?<!\w){patt}(?!\w)", " ", s)
        if " " in t:
            surname, initials = t.split()
            rev = f"{initials} {surname}"
            patt2 = re.escape(rev).replace(r"\.", r"\.?")
            s = re.sub(rf"(?<!\w){patt2}(?!\w)", " ", s)

    # 2) —Ñ–∞–º–∏–ª–∏—è + –æ–¥–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ë–∞–¥—Ä–∏–µ–≤–∞ –ó.¬ª / ¬´–°–∞–ª—Ç—ã–∫–æ–≤–∞ –î¬ª)
    RUS_U = "–ê-–Ø–Å"; RUS_L = "–∞-—è—ë"
    SURNAME_RE = rf"[{RUS_U}][{RUS_L}]+(?:-[{RUS_U}][{RUS_L}]+)?"
    PAT_SURNAME_INIT1 = re.compile(rf"\b{SURNAME_RE}\s+([{RUS_U}])\.?\b")
    s = PAT_SURNAME_INIT1.sub(" ", s)

    # 3) —Ä–æ–ª—å + —Ñ–∞–º–∏–ª–∏—è –≤ –∫–æ–Ω—Ü–µ (¬´–ª–µ–∫./–ø—Ä–∞–∫—Ç./–ª–∞–±./—Å–µ–º. –§–∞–º–∏–ª–∏—è¬ª)
    ROLE_BEFORE_SURNAME = re.compile(
        rf"(?:\b(?:–ª–µ–∫\.?|–ø—Ä–∞–∫—Ç\.?|–ª–∞–±\.?|—Å–µ–º\.?|–ø—Ä–µ–ø\.?)\b[ ,.:;-]*)({SURNAME_RE})(?=$|\s|[,.;:])",
        re.I,
    )
    s = ROLE_BEFORE_SURNAME.sub("", s)

    # 4) –ø–æ–¥—á–∏—Å—Ç–∫–∞
    s = s.replace("\r", " ").replace("\n", " ")
    s = re.sub(r"\s{2,}", " ", s)
    s = re.sub(r"\s*[.,;:]\s*$", "", s)
    return s.strip(" ,;/|")



# --- —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π, —á—Ç–æ–±—ã –≤–ª–µ–∑–∞–ª–æ –≤ —Å—Ç—Ä–æ–∫—É ---
_ABBR = [
    (re.compile(r"\b–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫\w*\s+–∞–Ω–∞–ª–∏–∑", re.I), "–ú–∞—Ç. –∞–Ω–∞–ª–∏–∑"),
    (re.compile(r"\b–ª–∏–Ω–µ–π–Ω–∞—è\s+–∞–ª–≥–µ–±—Ä–∞", re.I), "–õ–∏–Ω. –∞–ª–≥–µ–±—Ä–∞"),
    (re.compile(r"\b–æ—Å–Ω–æ–≤—ã\s+–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫\w*\s+–≤—ã—á–∏—Å–ª–µ–Ω\w*", re.I), "–û—Å–Ω. –∞–Ω–∞–ª–∏—Ç. –≤—ã—á–∏—Å–ª."),
    (re.compile(r"\b–∞–Ω–≥–ª–∏–π—Å–∫\w*(?:\s+—è–∑—ã–∫)?", re.I), "–ê–Ω–≥–ª. —è–∑—ã–∫"),
    (re.compile(r"\b—Ñ–∏–∑–∏–∫–∞(?:\s+–ª–∞–±\w*)?", re.I), "–§–∏–∑–∏–∫–∞"),
    (re.compile(r"\b–ª–µ–∫—Ü–∏(—è|–∏|–æ–Ω\w*)\b", re.I), "–ª–µ–∫."),
    (re.compile(r"\b–ø—Ä–∞–∫—Ç–∏–∫\w*\b", re.I), "–ø—Ä–∞–∫—Ç."),
    (re.compile(r"\b—Å–µ–º–∏–Ω–∞—Ä\w*\b", re.I), "—Å–µ–º."),
    (re.compile(r"\b–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω\w*\b", re.I), "–ª–∞–±."),
]

def _abbrev_subject(s: str) -> str:
    t = s
    for rx, repl in _ABBR:
        t = rx.sub(repl, t)
    return t

# ===== DAY (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ ‚Äî –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º, –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç–∞) =====
# –ó–ê–ú–ï–ù–ò–¢–ï —Ñ—É–Ω–∫—Ü–∏—é format_day —Ü–µ–ª–∏–∫–æ–º

def format_day(group: str, day: str, parity: str, lessons: List[Dict[str, str]]) -> str:
    """
    –î–Ω–µ–≤–Ω–æ–π –≤–∏–¥ (–°–µ–≥–æ–¥–Ω—è/–ó–∞–≤—Ç—Ä–∞):
      ‚è∞ HH:MM‚ÄìHH:MM
      üìö –ü—Ä–µ–¥–º–µ—Ç ‚Äî –ü—Ä–µ–ø.: –§–∞–º–∏–ª–∏—è..., –§–∞–º–∏–ª–∏—è...    (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
      üìç –ê—É–¥–∏—Ç–æ—Ä–∏—è   (–∏–ª–∏ ‚ö†Ô∏è –¥–ª—è —Å–ø–µ—Ü-–ø–∞—Ä)
    –ú–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ ‚Äî LONG_SEP. –ü–æ–≤—Ç–æ—Ä—ã ¬´–ò—Å—Ç–æ—Ä–∏–∏¬ª –≤ –æ–¥–∏–Ω –¥–µ–Ω—å —Å–∫—Ä—ã–≤–∞–µ–º.
    """
    header = (
        f"üìÖ <b>–ì—Ä—É–ø–ø–∞ { _html_escape(group) }</b> ‚Ä¢ "
        f"{('–ß—ë—Ç–Ω–∞—è' if parity=='—á—ë—Ç' else '–ù–µ—á—ë—Ç–Ω–∞—è')} –Ω–µ–¥–µ–ª—è ‚Ä¢ {_html_escape(day.title())}"
    )
    if not lessons:
        return f"{header}\n{LONG_SEP}\n‚Äî –ü–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî"

    blocks: List[str] = [header, LONG_SEP]
    history_emitted = False

    for it in sorted(lessons, key=lambda x: _parse_time_key(x['time'])):
        lecture_raw, room_raw = _split_lecture_room(it['text'])

        # –ø—Ä–µ–¥–º–µ—Ç ‚Äî —á–∏—Å—Ç–∏–º –æ—Ç –§–ò–û, —Å–∫–ª–µ–∏–≤–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º
        subj = _abbrev_subject(_one_line(_strip_teachers(lecture_raw)))

        # ¬´–ò—Å—Ç–æ—Ä–∏—é¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å (–±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        if it.get("special") and _is_history_subject(subj):
            if history_emitted:
                continue
            history_emitted = True

        # —Å—Ç—Ä–æ–∫–∏ –±–ª–æ–∫–∞
        lines = [f"‚è∞ <b>{_html_escape(it['time'])}</b>"]

        # –ø—Ä–µ–¥–º–µ—Ç + –ø—Ä–µ–ø–æ–¥—ã –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        teachers_raw = _extract_teachers(lecture_raw)
        teachers = _dedupe_teachers_prefer_rich(teachers_raw)

        subj_line = f"üìö {_html_escape(subj)}"
        if teachers:
            # –±–µ–∑ —Å–ª–æ–≤–∞ ¬´–ü—Ä–µ–ø.¬ª ‚Äî —Ñ–∞–º–∏–ª–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            subj_line += f" ‚Äî {_html_escape(', '.join(teachers))}"
        lines.append(subj_line)

        # –∞—É–¥–∏—Ç–æ—Ä–∏—è / –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if it.get("special"):
            lines.append("‚ö†Ô∏è <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</i>")
        elif room_raw:
            lines.append(f"üìç {_html_escape(_one_line(room_raw))}")

        if it.get("room_is_zoom") and it.get("room_link"):
            lines.append(f"üîó Zoom: {_html_escape(it['room_link'])}")

        blocks.append("\n".join(lines))
        blocks.append(LONG_SEP)

    return "\n".join(blocks).rstrip()

# ===== WEEK: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –ø–∞—Ä—É (–≤—Ä–µ–º—è ‚Äî –ø—Ä–µ–¥–º–µ—Ç ‚Äî –∞—É–¥–∏—Ç–æ—Ä–∏—è), –≤—Å—ë –∫–æ—Ä–æ—á–µ –∏ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ =====
SUBJECT_MAX = 28  # ‚Üê –ª–∏–º–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
ROOM_MAX    = 18  # ‚Üê –ª–∏–º–∏—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏

def _mono_line(time_s: str, subject_s: str, room_s: str) -> str:
    """–û–±—ã—á–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ <code>/<pre>, —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –∏ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤."""
    time_txt = _one_line(time_s)
    subj_txt = _ellipsize(_abbrev_subject(_one_line(subject_s)), SUBJECT_MAX)
    room_txt = _ellipsize(_one_line(room_s), ROOM_MAX)

    parts = [time_txt, subj_txt]
    if room_txt:
        parts.append(room_txt)

    return " ‚Äî ".join(_html_escape(p) for p in parts)

def format_week_compact_mono(group: str, parity: str, lessons: List[Dict[str, str]]) -> str:
    """
    –ù–µ–¥–µ–ª—è: –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ¬´–≤—Ä–µ–º—è ‚Äî –ø—Ä–µ–¥–º–µ—Ç ‚Äî –∞—É–¥–∏—Ç–æ—Ä–∏—è¬ª.
    ‚Ä¢ –î–Ω–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –¥–ª–∏–Ω–Ω–æ–π –ø–æ–ª–æ—Å–æ–π.
    ‚Ä¢ –ü–æ–≤—Ç–æ—Ä—ã ¬´–ò—Å—Ç–æ—Ä–∏–∏¬ª –≤ –æ–¥–Ω–æ–º –¥–Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º.
    ‚Ä¢ –°–ø–µ—Ü-–ø–∞—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º '‚ö†Ô∏è –ø—Ä–∏–ª.'.
    ‚Ä¢ –ï—Å–ª–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è ‚Äî Zoom —Å —Å—Å—ã–ª–∫–æ–π, –≤—ã–≤–æ–¥–∏–º ¬´üîó <a href="...">Zoom</a>¬ª.
    """
    header = f"üìÜ <b>–ì—Ä—É–ø–ø–∞ { _html_escape(group) }</b> ‚Ä¢ {('–ß—ë—Ç–Ω–∞—è' if parity=='—á—ë—Ç' else '–ù–µ—á—ë—Ç–Ω–∞—è')} –Ω–µ–¥–µ–ª—è"
    if not lessons:
        return f"{header}\n{WEEK_SEP}\n‚Äî –ü–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî"

    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    by_day: Dict[str, List[Dict[str, str]]] = {}
    for it in lessons:
        d = str(it["day"]).strip().upper()
        by_day.setdefault(d, []).append(it)

    out: List[str] = [header, WEEK_SEP]

    for d in DAY_ORDER:
        day_items = by_day.get(d, [])
        if not day_items:
            continue

        out.append(f"üìå {d.title()}")

        history_emitted = False
        for it in sorted(day_items, key=lambda x: _parse_time_key(x["time"])):
            lecture, room = _split_lecture_room(it["text"])
            subj_raw = _strip_teachers(lecture)

            # ¬´–ò—Å—Ç–æ—Ä–∏—é¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å
            if it.get("special") and _is_history_subject(subj_raw):
                if history_emitted:
                    continue
                history_emitted = True

            # –∞—É–¥–∏—Ç–æ—Ä–∏—è (—Å HTML –¥–ª—è Zoom)
            if it.get("special"):
                room_html = _html_escape("‚ö†Ô∏è –ø—Ä–∏–ª.")
            else:
                if it.get("room_is_zoom") and it.get("room_link"):
                    room_html = f"üîó {_safe_anchor(it['room_link'], 'Zoom')}"
                else:
                    room_disp = _ellipsize(_one_line(room or ""), ROOM_MAX) if room else ""
                    room_html = _html_escape(room_disp) if room_disp else ""

            out.append(_line_with_room_html(it["time"], subj_raw, room_html))

        out.append(WEEK_SEP)

    if out and out[-1] == WEEK_SEP:
        out.pop()

    return "\n".join(out)


