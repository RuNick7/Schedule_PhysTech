from __future__ import annotations

import os
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram import Router, F
from datetime import timedelta
from aiogram.types import CallbackQuery
from Shedule_bot.app.services.gcal_client import upsert_event
from Shedule_bot.app.handlers.schedule_view import _load_lessons_for_user_group
from Shedule_bot.app.services.gcal_mapper import lesson_to_event
from Shedule_bot.app.utils.dt import now_tz
from Shedule_bot.app.services.db import set_gcal_last_sync
from Shedule_bot.app.utils.week_parity import week_parity_for_date

from Shedule_bot.app.services.db import (
    get_user,
    # –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–æ–±–∞–≤—å –≤ db.py –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):
    # set_gcal_connected(telegram_id: int, connected: bool) -> None
    # set_gcal_tokens(telegram_id: int, access: str, refresh: str|None, expiry_iso: str) -> None
    # set_gcal_calendar_id(telegram_id: int, cal_id: str) -> None
    # set_gcal_last_sync(telegram_id: int, iso: str) -> None
)
from Shedule_bot.app.config import settings

import logging
log = logging.getLogger("gcal")

router = Router()

# ---------- helpers ----------
def _weekday_upper(dt) -> str:
    return ["–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö","–í–¢–û–†–ù–ò–ö","–°–†–ï–î–ê","–ß–ï–¢–í–ï–†–ì","–ü–Ø–¢–ù–ò–¶–ê","–°–£–ë–ë–û–¢–ê","–í–û–°–ö–†–ï–°–ï–ù–¨–ï"][dt.weekday()]


def _public_base_url() -> str:
    # –ø—Ä–æ–±—É–µ–º –∏–∑ pydantic-–∫–æ–Ω—Ñ–∏–≥–∞; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏–∑ ENV
    return (getattr(settings, "public_base_url", None) or os.getenv("PUBLIC_BASE_URL", "")).rstrip("/")

def _oauth_connect_url(telegram_id: int) -> str:
    base = _public_base_url()
    if not base:
        # –ø—É—Å—Ç—å –ª—É—á—à–µ –±—Ä–æ—Å–∏—Ç –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        return "about:blank"
    return f"{base}/oauth2/connect?state={telegram_id}"

def _kb_root(user: dict):
    kb = InlineKeyboardBuilder()
    connected = bool(user.get("gcal_connected"))
    cal = user.get("gcal_calendar_id") or "primary"
    if connected:
        kb.button(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è", callback_data="gcal:sync:today")
        kb.button(text="üìÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—é", callback_data="gcal:sync:week")
        kb.button(text=f"üóÇ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {cal}", callback_data="gcal:choose_cal")
        kb.button(text="üîå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="gcal:disconnect")
    else:
        # –ö–Ω–æ–ø–∫–∞ —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ OAuth
        kb.button(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar", url=_oauth_connect_url(user["telegram_id"]))
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:open")
    kb.adjust(1, 1, 1, 1) if connected else kb.adjust(1, 1)
    return kb.as_markup()

def _kb_choose_calendar(current: str | None):
    kb = InlineKeyboardBuilder()
    cur = (current or "primary")
    prefix = "‚Ä¢ "  # –ø–æ–º–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
    kb.button(text=f"{prefix if cur=='primary' else ''}Primary", callback_data="gcal:cal:primary")
    # –æ—Å—Ç–∞–≤–∏–º –∑–∞–≥–æ—Ç–æ–≤–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å (—Å–æ–∑–¥–∞–¥–∏–º –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ API)
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="gcal:cal:create")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="gcal:open")
    kb.adjust(1, 1, 1)
    return kb.as_markup()

def _status_text(u: dict) -> str:
    connected = bool(u.get("gcal_connected"))
    cal = u.get("gcal_calendar_id") or "primary"
    last = u.get("gcal_last_sync") or "‚Äî"
    lines = [
        "üìÜ <b>Google Calendar</b>",
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' if connected else '‚õîÔ∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}",
    ]
    if connected:
        lines += [
            f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å: <b>{cal}</b>",
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {last}",
            "",
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        ]
    else:
        lines += [
            "",
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar¬ª, –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞.",
        ]
    return "\n".join(lines)

# ---------- entry ----------

@router.callback_query(F.data.in_({"main:gcal", "gcal:open"}))
async def gcal_open(q: CallbackQuery):
    u = get_user(q.from_user.id)
    if not u:
        await q.answer("–°–Ω–∞—á–∞–ª–∞ /start", show_alert=True); return
    # –¥–æ–±–∞–≤–∏–º –≤ –æ–±—ä–µ–∫—Ç user –ø–æ–ª–µ telegram_id, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å URL —Å state
    u = {**u, "telegram_id": q.from_user.id}
    await q.message.edit_text(
        _status_text(u),
        reply_markup=_kb_root(u),
        disable_web_page_preview=True,
    )
    await q.answer()

# ---------- choose calendar ----------

@router.callback_query(F.data == "gcal:choose_cal")
async def gcal_choose_calendar(q: CallbackQuery):
    u = get_user(q.from_user.id)
    if not u or not u.get("gcal_connected"):
        await q.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar.", show_alert=True); return
    await q.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:",
        reply_markup=_kb_choose_calendar(u.get("gcal_calendar_id")),
        disable_web_page_preview=True,
    )
    await q.answer()

@router.callback_query(F.data == "gcal:cal:primary")
async def gcal_set_primary(q: CallbackQuery):
    try:
        from app.services.db import set_gcal_calendar_id  # type: ignore
    except Exception:
        await q.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è set_gcal_calendar_id –≤ –ë–î.", show_alert=True); return
    set_gcal_calendar_id(q.from_user.id, "primary")
    await gcal_open(q)

@router.callback_query(F.data == "gcal:cal:create")
async def gcal_create_separate(q: CallbackQuery):
    """
    –ó–∞–≥–ª—É—à–∫–∞: —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ gcal_client.
    –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    await q.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å–∫–æ—Ä–æ.", show_alert=True)

# ---------- sync actions (stubs for now) ----------

@router.callback_query(F.data == "gcal:sync:today")
async def gcal_sync_today(q: CallbackQuery):
    u = get_user(q.from_user.id)
    if not u or not u.get("gcal_connected"):
        await q.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar.", show_alert=True); return

    tz = u.get("timezone") or settings.timezone
    now = now_tz(tz)
    parity = week_parity_for_date(now, tz)
    day_upper = _weekday_upper(now)

    # –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lessons = await _load_lessons_for_user_group(u)
    day_lessons = [it for it in lessons if it["parity"] == parity and it["day"] == day_upper]

    cal_id = u.get("gcal_calendar_id") or "primary"
    ok, fail = 0, 0
    for lesson in day_lessons:
        try:
            event, key = lesson_to_event(u, lesson, now)  # –∏–ª–∏ dt_day
            await q.bot.loop.run_in_executor(None, lambda: upsert_event(q.from_user.id, cal_id, event, key))
            ok += 1
        except Exception as e:
            fail += 1
            log.exception("GCAL sync failed for lesson=%s time=%s day=%s", lesson.get("subject") or lesson.get("text"),
                          lesson.get("time"), lesson.get("day"))

    log.info("sync_today done user=%s ok=%d fail=%d", q.from_user.id, ok, fail)
    # –æ—Ç–º–µ—Ç–∫–∞ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    try:
        from datetime import datetime, timezone
        set_gcal_last_sync(q.from_user.id, datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ"))
    except Exception:
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
    msg = _status_text({**u, "telegram_id": q.from_user.id})
    msg += f"\n\n–ì–æ—Ç–æ–≤–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {ok}, –æ—à–∏–±–æ–∫ {fail}."
    await q.message.edit_text(msg, reply_markup=_kb_root({**u, "telegram_id": q.from_user.id}), disable_web_page_preview=True)
    await q.answer()

@router.callback_query(F.data == "gcal:sync:week")
async def gcal_sync_week(q: CallbackQuery):
    u = get_user(q.from_user.id)
    if not u or not u.get("gcal_connected"):
        await q.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar.", show_alert=True); return

    tz = u.get("timezone") or settings.timezone
    # auto/—á—ë—Ç/–Ω–µ—á—ë—Ç –º—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ UI; –∑–¥–µ—Å—å –≤–æ–∑—å–º—ë–º auto
    from Shedule_bot.app.utils.week_parity import week_parity_for_date
    parity = week_parity_for_date(None, tz)

    lessons = await _load_lessons_for_user_group(u)
    week_lessons = [it for it in lessons if it["parity"] == parity]

    # –î–∞—Ç–∞-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å: –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    base = now_tz(tz)
    # —Å–æ–∑–¥–∞–¥–∏–º –º–∞–ø—É day->offset
    day_to_off = {"–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö":0,"–í–¢–û–†–ù–ò–ö":1,"–°–†–ï–î–ê":2,"–ß–ï–¢–í–ï–†–ì":3,"–ü–Ø–¢–ù–ò–¶–ê":4,"–°–£–ë–ë–û–¢–ê":5,"–í–û–°–ö–†–ï–°–ï–ù–¨–ï":6}
    monday = base - timedelta(days=base.weekday())

    cal_id = u.get("gcal_calendar_id") or "primary"
    ok, fail = 0, 0
    for lesson in week_lessons:
        try:
            offset = day_to_off[str(lesson["day"]).strip().upper()]
            dt_day = monday + timedelta(days=offset)
            event, key = lesson_to_event(u, lesson, dt_day)
            await q.bot.loop.run_in_executor(
                None, lambda: upsert_event(q.from_user.id, cal_id, event, key)
            )
            ok += 1
        except Exception:
            fail += 1

    try:
        from datetime import datetime, timezone
        set_gcal_last_sync(q.from_user.id, datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ"))
    except Exception:
        pass

    msg = _status_text({**u, "telegram_id": q.from_user.id})
    msg += f"\n\n–ì–æ—Ç–æ–≤–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {ok}, –æ—à–∏–±–æ–∫ {fail}."
    await q.message.edit_text(msg, reply_markup=_kb_root({**u, "telegram_id": q.from_user.id}), disable_web_page_preview=True)
    await q.answer()

# ---------- disconnect ----------

@router.callback_query(F.data == "gcal:disconnect")
async def gcal_disconnect(q: CallbackQuery):
    try:
        from app.services.db import set_gcal_connected, set_gcal_tokens, set_gcal_calendar_id  # type: ignore
    except Exception:
        await q.answer("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ë–î –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è GCAL.", show_alert=True); return

    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∏ —Ç–æ–∫–µ–Ω—ã
    set_gcal_connected(q.from_user.id, False)
    set_gcal_tokens(q.from_user.id, "", None, "")
    set_gcal_calendar_id(q.from_user.id, None)  # –¥–æ–ø—É—Å–∫–∞–µ–º None –≤ —Ä–µ–∞–ª. –ë–î

    # –æ–±–Ω–æ–≤–∏–º —ç–∫—Ä–∞–Ω
    u = get_user(q.from_user.id) or {}
    u = {**u, "telegram_id": q.from_user.id}
    await q.message.edit_text(
        _status_text(u),
        reply_markup=_kb_root(u),
        disable_web_page_preview=True,
    )
    await q.answer()
