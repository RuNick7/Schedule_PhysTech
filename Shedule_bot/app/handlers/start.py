# app/handlers/start.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.handlers.menu import open_settings as menu_open_settings

from app.services.db import (
    init_db, upsert_user, get_user, set_course, set_group, set_message_id
)
from app.services.groups import list_groups_for_course

router = Router()

def _kb_courses():
    kb = InlineKeyboardBuilder()
    for i in (1, 2, 3, 4):
        kb.button(text=f"{i} –∫—É—Ä—Å", callback_data=f"start:course:{i}")
    kb.adjust(4)
    return kb.as_markup()

def _kb_groups(course: int):
    groups = list_groups_for_course(course)
    kb = InlineKeyboardBuilder()
    for g in groups:
        kb.button(text=g, callback_data=f"start:group:{g}")
    kb.adjust(3)
    return kb.as_markup()

def _kb_main_menu():
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="main:schedule")
    kb.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main:settings")
    kb.button(text="üìÜ Google Calendar", callback_data="main:gcal")
    kb.adjust(1, 1, 1)
    return kb.as_markup()

@router.message(CommandStart())
async def start_cmd(msg: Message):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–ø–¥–µ–π—Ç t.me/username
    init_db()
    upsert_user(msg.from_user.id, msg.from_user.username)
    user = get_user(msg.from_user.id)

    # 1) –ï—Å—Ç—å –≥—Ä—É–ø–ø–∞ ‚Üí —Å—Ä–∞–∑—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if user and user.get("group_code"):
        text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{msg.from_user.full_name}</b>!\n"
            f"–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: <b>{user['group_code']}</b>.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        m = await msg.answer(text, reply_markup=_kb_main_menu())
        set_message_id(msg.from_user.id, m.message_id)
        return

    # 2) –ï—Å—Ç—å –∫—É—Ä—Å, –Ω–æ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã ‚Üí —Å—Ä–∞–∑—É –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    if user and user.get("course"):
        course = int(user["course"])
        m = await msg.answer(
            f"–ö—É—Ä—Å: <b>{course}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ <b>–≥—Ä—É–ø–ø—É</b>:",
            reply_markup=_kb_groups(course)
        )
        set_message_id(msg.from_user.id, m.message_id)
        return

    # 3) –ù–æ–≤–∏—á–æ–∫ ‚Üí –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞
    m = await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–∏–ª—å.\n\n–í—ã–±–µ—Ä–∏ <b>–∫—É—Ä—Å</b>:",
        reply_markup=_kb_courses()
    )
    set_message_id(msg.from_user.id, m.message_id)

@router.callback_query(F.data.startswith("start:course:"))
async def choose_course(q: CallbackQuery):
    course = int(q.data.split(":")[-1])
    set_course(q.from_user.id, course)

    await q.message.edit_text(
        f"–ö—É—Ä—Å: <b>{course}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ <b>–≥—Ä—É–ø–ø—É</b>:",
        reply_markup=_kb_groups(course)
    )
    await q.answer()

@router.callback_query(F.data.startswith("start:group:"))
async def choose_group(q: CallbackQuery):
    group = q.data.split(":", 2)[-1]
    set_group(q.from_user.id, group)

    # —Å—Ä–∞–∑—É —Å–ø—Ä–æ—Å–∏–º –ø—Ä–æ –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="autosend:open")
    kb.button(text="–ù–µ—Ç, –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start:to_main")
    kb.adjust(1, 1)

    await q.message.edit_text(
        f"–ì—Ä—É–ø–ø–∞: <b>{group}</b>\n\n–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?",
        reply_markup=kb.as_markup()
    )
    await q.answer()

@router.callback_query(F.data == "start:to_main")
async def to_main(q: CallbackQuery):
    await q.message.edit_text("–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=_kb_main_menu())
    await q.answer()

@router.callback_query(F.data == "main:settings")
async def open_settings(q: CallbackQuery):
    # –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—É –∏–∑ menu.py
    await menu_open_settings(q)
