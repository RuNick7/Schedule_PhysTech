from __future__ import annotations
from datetime import timedelta
from typing import List
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.services.db import get_user, set_message_id
from app.services.sheets_client import fetch_sheet_values_and_links
from app.services.schedule_expand import expand_merged_matrix
from app.services.schedule_list import list_lessons_matrix
from app.utils.week_parity import week_parity_for_date
from app.utils.dt import now_tz
from app.utils.format_schedule import format_day, format_week_compact_mono
from app.config import settings
from app.utils.subjects_alert import detect_special_subjects_in_matrix

router = Router()

_NO_LESSONS_DEFAULT = [
    "‚Äî –ü–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî",
    "–°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å! ‚ú®",
    "–°–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø–∞—Ä ‚Äî –º–æ–∂–Ω–æ –≤—ã–¥–æ—Ö–Ω—É—Ç—å üôÇ",
    "–ù–∏—á–µ–≥–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –ë–µ—Ä–µ–≥–∏ —Å–∏–ª—ã üí™",
    "–ü–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåø",
]

# ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def _kb_main_menu():
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="main:schedule")
    kb.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main:settings")
    kb.button(text="üìÜ Google Calendar", callback_data="main:gcal")
    kb.adjust(1, 1, 1)
    return kb.as_markup()

def kb_schedule_root():
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="sched:day:today")
    kb.button(text="–ó–∞–≤—Ç—Ä–∞", callback_data="sched:day:tomorrow")
    kb.button(text="–ù–µ–¥–µ–ª—è", callback_data="sched:week:auto")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="start:to_main")
    kb.adjust(1, 1, 1, 1)
    return kb.as_markup()

def kb_day_controls(day_name: str, parity: str):
    kb = InlineKeyboardBuilder()
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —á—ë—Ç–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∂–µ –¥–Ω—è
    alt = "—á—ë—Ç" if parity == "–Ω–µ—á—ë—Ç" else "–Ω–µ—á—ë—Ç"
    kb.button(text=f"–î—Ä—É–≥–∞—è —á—ë—Ç–Ω–æ—Å—Ç—å ({'–ß—ë—Ç' if alt=='—á—ë—Ç' else '–ù–µ—á—ë—Ç'})", callback_data=f"sched:day:same:{day_name}:{alt}")
    kb.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–µ–ª—é", callback_data="sched:week:auto")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="sched:root")
    kb.adjust(1, 1, 1)
    return kb.as_markup()

def kb_week_controls(parity: str):
    kb = InlineKeyboardBuilder()
    alt = "—á—ë—Ç" if parity == "–Ω–µ—á—ë—Ç" else "–Ω–µ—á—ë—Ç"
    kb.button(text=f"–°–º–µ–Ω–∏—Ç—å –Ω–∞ {'–ß—ë—Ç–Ω—É—é' if alt == '—á—ë—Ç' else '–ù–µ—á—ë—Ç–Ω—É—é'}", callback_data=f"sched:week:{alt}")
    kb.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="sched:day:today")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="sched:root")
    kb.adjust(1, 1, 1)  # –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ, ¬´–ù–∞–∑–∞–¥¬ª ‚Äî –≤ —Å–∞–º–æ–º –Ω–∏–∑—É

# ---------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ ----------

def _russian_day_name(dt) -> str:
    # 0=Mon ‚Üí –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö
    names = ["–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö","–í–¢–û–†–ù–ò–ö","–°–†–ï–î–ê","–ß–ï–¢–í–ï–†–ì","–ü–Ø–¢–ù–ò–¶–ê","–°–£–ë–ë–û–¢–ê","–í–û–°–ö–†–ï–°–ï–ù–¨–ï"]
    return names[dt.weekday()]

async def _load_lessons_for_user_group(user: dict):
    vals, links, merges = fetch_sheet_values_and_links(
        spreadsheet_id=settings.spreadsheet_id,
        sheet_gid=settings.sheet_gid,
        creds_path=settings.google_credentials,
    )
    mtx_vals  = expand_merged_matrix(vals, merges=merges)
    mtx_links = expand_merged_matrix(links, merges=merges)
    all_lessons = list_lessons_matrix(mtx_vals, mtx_links)
    return [it for it in all_lessons if it["group"] == user["group_code"]]

def _filter_by_day_and_parity(lessons: List[dict], day_name: str, parity: str) -> List[dict]:
    return [it for it in lessons if str(it["day"]).strip().upper() == day_name and it["parity"] == parity]

def _filter_by_parity(lessons: List[dict], parity: str) -> List[dict]:
    return [it for it in lessons if it["parity"] == parity]

async def _send_or_edit(q: CallbackQuery, text: str, kb):
    user = get_user(q.from_user.id)
    # –†–µ–∂–∏–º 1 ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user and user.get("type") == 1 and user.get("message_id"):
        try:
            await q.message.bot.edit_message_text(
                chat_id=q.message.chat.id,
                message_id=user["message_id"],
                text=text,
                reply_markup=kb
            )
            await q.answer()
            return
        except Exception:
            pass  # —É–ø–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ –∏ –æ–±–Ω–æ–≤–∏–º message_id

    m = await q.message.answer(text, reply_markup=kb, disable_web_page_preview=True)
    if user and user.get("type") == 1:
        set_message_id(q.from_user.id, m.message_id)
    await q.answer()

# ---------- –≤—Ö–æ–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ----------
@router.callback_query(F.data == "start:to_main")
async def to_main(q: CallbackQuery):
    await q.message.edit_text("–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=_kb_main_menu())
    await q.answer()

@router.callback_query(F.data == "main:schedule")
async def schedule_entry(q: CallbackQuery):
    user = get_user(q.from_user.id)
    if not user or not user.get("group_code"):
        await q.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø–∞.", show_alert=True)
        return
    await _send_or_edit(q, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", kb_schedule_root())

# ---------- –∫–æ—Ä–µ–Ω—å –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ ----------
@router.callback_query(F.data == "sched:root")
async def sched_root(q: CallbackQuery):
    await _send_or_edit(q, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", kb_schedule_root())

# ---------- —Å–µ–≥–æ–¥–Ω—è / –∑–∞–≤—Ç—Ä–∞ ----------
@router.callback_query(F.data.in_({"sched:day:today", "sched:day:tomorrow"}))
async def sched_day_today_tomorrow(q: CallbackQuery):
    user = get_user(q.from_user.id)
    if not user or not user.get("group_code"):
        await q.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.", show_alert=True)
        return

    tz = user.get("timezone") or settings.timezone
    now = now_tz(tz)
    is_tomorrow = q.data.endswith("tomorrow")
    target = now + timedelta(days=1 if is_tomorrow else 0)

    parity = week_parity_for_date(target, tz)
    # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ UPPER, –∫–∞–∫ –≤ –ø–∞—Ä—Å–µ—Ä–µ
    DAY_UP = ["–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö","–í–¢–û–†–ù–ò–ö","–°–†–ï–î–ê","–ß–ï–¢–í–ï–†–ì","–ü–Ø–¢–ù–ò–¶–ê","–°–£–ë–ë–û–¢–ê","–í–û–°–ö–†–ï–°–ï–ù–¨–ï"]
    day_upper = DAY_UP[target.weekday()]

    # –ø–∞—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lessons = await _load_lessons_for_user_group(user)
    day_lessons = [it for it in lessons if it["parity"] == parity and it["day"] == day_upper]

    text = format_day(user["group_code"], day_upper, parity, day_lessons)

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ –¥–µ–Ω—å (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
    kb = kb_day_controls(day_upper, parity)  # –µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
    # –∏–ª–∏ —Å–æ–±–µ—Ä–∏ –∑–¥–µ—Å—å InlineKeyboardBuilder

    await _send_or_edit(q, text, kb)

# —Ç–æ—Ç –∂–µ –¥–µ–Ω—å, –Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ —á—ë—Ç–Ω–æ—Å—Ç–∏
@router.callback_query(F.data.startswith("sched:day:same:"))
async def sched_day_same(q: CallbackQuery):
    # data: sched:day:same:{DAY}:{parity}
    _, _, _, day_name, parity = q.data.split(":")
    user = get_user(q.from_user.id)
    if not user or not user.get("group_code"):
        await q.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.", show_alert=True)
        return

    # –≥—Ä—É–∑–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏ (–¥–ª—è Zoom)
    vals, links, merges = fetch_sheet_values_and_links(
        spreadsheet_id=settings.spreadsheet_id,
        sheet_gid=settings.sheet_gid,
        creds_path=settings.google_credentials,
    )
    mtx_vals = expand_merged_matrix(vals, merges=merges)
    mtx_links = expand_merged_matrix(links, merges=merges)
    all_lessons = list_lessons_matrix(mtx_vals, mtx_links)
    group_lessons = [it for it in all_lessons if it["group"] == user["group_code"]]

    day_upper = str(day_name).strip().upper()
    day_lessons = [it for it in group_lessons if it["parity"] == parity and it["day"] == day_upper]

    text = format_day(user["group_code"], day_upper, parity, day_lessons)
    await _send_or_edit(q, text, kb_day_controls(day_upper, parity))

@router.callback_query(F.data.startswith("sched:week"))
async def sched_week(q: CallbackQuery):
    user = get_user(q.from_user.id)
    if not user or not user.get("group_code"):
        await q.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.", show_alert=True)
        return

    tz = user.get("timezone") or settings.timezone
    parity = q.data.split(":")[-1]
    if parity == "auto":
        parity = week_parity_for_date(None, tz)

    # –∑–Ω–∞—á–µ–Ω–∏—è + —Å—Å—ã–ª–∫–∏ (–¥–ª—è Zoom)
    vals, links, merges = fetch_sheet_values_and_links(
        spreadsheet_id=settings.spreadsheet_id,
        sheet_gid=settings.sheet_gid,
        creds_path=settings.google_credentials,
    )
    mtx_vals = expand_merged_matrix(vals, merges=merges)
    mtx_links = expand_merged_matrix(links, merges=merges)
    lessons_all = list_lessons_matrix(mtx_vals, mtx_links)
    lessons_grp = [it for it in lessons_all if it["group"] == user["group_code"]]
    week_lessons = [it for it in lessons_grp if it["parity"] == parity]

    text = format_week_compact_mono(user["group_code"], parity, week_lessons)

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = InlineKeyboardBuilder()
    alt = "—á—ë—Ç" if parity == "–Ω–µ—á—ë—Ç" else "–Ω–µ—á—ë—Ç"
    kb.button(text=f"–°–º–µ–Ω–∏—Ç—å –Ω–∞ {'–ß—ë—Ç–Ω—É—é' if alt=='—á—ë—Ç' else '–ù–µ—á—ë—Ç–Ω—É—é'}", callback_data=f"sched:week:{alt}")
    kb.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="sched:day:today")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="sched:root")
    kb.adjust(1, 1, 1)

    # —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (type=1)
    if user.get("type") == 1 and user.get("message_id"):
        try:
            await q.message.bot.edit_message_text(
                chat_id=q.message.chat.id,
                message_id=user["message_id"],
                text=text,
                reply_markup=kb.as_markup()
            )
            await q.answer()
            return
        except Exception:
            pass

    m = await q.message.answer(text, reply_markup=kb.as_markup(), disable_web_page_preview=True)
    if user.get("type") == 1:
        set_message_id(q.from_user.id, m.message_id)
    await q.answer()
